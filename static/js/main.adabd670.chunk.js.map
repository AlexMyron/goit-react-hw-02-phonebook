{"version":3,"sources":["components/Form/Form.styled.js","components/Form/Form.js","components/ListElement/ListElement.styled.js","components/ListElement/ListElement.js","components/Contacts/Contacts.styled.js","components/Contacts/Contacts.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","App.styled.js","App.js","reportWebVitals.js","index.js"],"names":["FormSection","styled","form","Label","label","Form","Component","onSubmit","useState","name","setName","number","setNumber","filter","onChange","e","currentTarget","value","preventDefault","type","pattern","title","required","Button","button","Contact","li","TextWrapper","div","ListElement","elData","deleteBtn","id","onClick","List","ul","Contacts","contactsList","searchResult","btnDelete","isListEmpty","length","isSearchResultEmpty","map","contact","Filter","setFilter","query","size","Wrapper","App","contacts","setContacts","setSearchResult","checkForDouble","newName","isDouble","find","alert","state","uuidv4","data","trim","res","searchQuery","toLowerCase","el","indexOf","searchContacts","dataId","updatedList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.adabd670.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const FormSection = styled.form`\r\n  width: 70%;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 10px;\r\n\r\n  font-size: 18px;\r\n`;\r\n","import React, { Component } from 'react';\r\nimport { useState } from 'react';\r\nimport { Label, FormSection } from './Form.styled';\r\n\r\nconst Form = ({ onSubmit }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [filter, setFiter] = useState('');\r\n\r\n  const onChange = e => {\r\n    const { value, name } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const state = { name, number, filter };\r\n    onSubmit(state);\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <FormSection onSubmit={handleSubmit}>\r\n      <Label>\r\n        Name\r\n        <input\r\n          onChange={onChange}\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </Label>\r\n      <Label>\r\n        Number\r\n        <input\r\n          onChange={onChange}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </Label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </FormSection>\r\n  );\r\n};\r\nclass classedForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    filter: '',\r\n  };\r\n\r\n  onChange = e => {\r\n    const { value, name } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.resetInput();\r\n  };\r\n\r\n  resetInput = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <FormSection onSubmit={this.handleSubmit}>\r\n        <Label>\r\n          Name\r\n          <input\r\n            onChange={this.onChange}\r\n            value={this.state.name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </Label>\r\n        <Label>\r\n          Number\r\n          <input\r\n            onChange={this.onChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </Label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </FormSection>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Button = styled.button`\r\n  width: 80px;\r\n\r\n  transition: all 250ms ease;\r\n  &:hover,\r\n  :focus {\r\n    background-color: skyblue;\r\n  }\r\n`;\r\n\r\nexport const Contact = styled.li`\r\n  height: 30px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const TextWrapper = styled.div`\r\n  display: flex;\r\n  gap: 5px;\r\n  align-items: center;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { FaUser } from 'react-icons/fa';\r\nimport { RiDeleteBin5Fill } from 'react-icons/ri';\r\nimport { Button, Contact, TextWrapper } from './ListElement.styled';\r\n\r\nconst ListElement = ({ elData, deleteBtn }) => {\r\n  const deleteItem = e => {\r\n    deleteBtn(elData.id);\r\n  };\r\n  return (\r\n    <Contact>\r\n      <TextWrapper>\r\n        <FaUser />\r\n        {elData.name}: {elData.number}\r\n      </TextWrapper>\r\n      <Button type=\"button\" data-id={elData.id} onClick={deleteItem}>\r\n        <RiDeleteBin5Fill />\r\n      </Button>\r\n    </Contact>\r\n  );\r\n};\r\n\r\nListElement.propTypes = { elData: PropTypes.object, deleteBtn: PropTypes.func };\r\n\r\nexport default ListElement;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n  padding: 0;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport ListElement from '../ListElement';\r\nimport { List } from './Contacts.styled';\r\n\r\nconst Contacts = ({ contactsList, searchResult, btnDelete }) => {\r\n  const isListEmpty = contactsList.length === 0;\r\n  const isSearchResultEmpty = searchResult.length === 0;\r\n  return (\r\n    <div>\r\n      {isListEmpty && <p>Your contacts List is still empty.</p>}\r\n      <List>\r\n        {isSearchResultEmpty\r\n          ? contactsList.map(contact => (\r\n              <ListElement elData={contact} deleteBtn={btnDelete} key={contact.id} />\r\n            ))\r\n          : searchResult.map(contact => <ListElement elData={contact} key={contact.id} />)}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nContacts.propTypes = {\r\n  contactsList: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  searchResult: PropTypes.array.isRequired,\r\n  btnDelete: PropTypes.func,\r\n};\r\n\r\nexport default Contacts;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n","import React, { Component } from 'react';\r\nimport { useState } from 'react';\r\nimport { BiSearchAlt } from 'react-icons/bi';\r\nimport { Label } from './Filter.styled';\r\n\r\nconst Filter = ({ onChange }) => {\r\n  const [filter, setFilter] = useState('');\r\n\r\n  const handleQuery = e => {\r\n    const query = e.currentTarget.value;\r\n    setFilter(e.currentTarget.value);\r\n    onChange(query);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Find contacts by name</h3>\r\n      <Label>\r\n        <input type=\"text\" name=\"filter\" onChange={handleQuery} value={filter} />\r\n        <BiSearchAlt size=\"18\" />\r\n      </Label>\r\n    </div>\r\n  );\r\n};\r\nclass classedFilter extends Component {\r\n  state = {\r\n    filter: '',\r\n  };\r\n\r\n  handleQuery = e => {\r\n    const query = e.currentTarget.value;\r\n    this.setState({ filter: e.currentTarget.value });\r\n    // console.log(query);\r\n    this.props.onChange(query);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Find contacts by name</h3>\r\n        <Label>\r\n          <input type=\"text\" name=\"filter\" onChange={this.handleQuery} value={this.state.filter} />\r\n          <BiSearchAlt size=\"18\" />\r\n        </Label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Filter;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 25%;\r\n  padding-left: 30px;\r\n`;\r\n","import React, { Component } from 'react';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\nimport Form from './components/Form';\nimport Contacts from './components/Contacts';\nimport Filter from './components/Filter';\nimport { Wrapper } from './App.styled';\n\nconst App = () => {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n  const [searchResult, setSearchResult] = useState([]);\n\n  const handleFormSubmit = ({ name, number }) => {\n    const isDouble = checkForDouble(name);\n    if (isDouble) return;\n    setContacts(state => [...state, { name, number, id: uuidv4() }]);\n  };\n\n  const searchContacts = query => {\n    const searchQuery = query.trim().toLowerCase();\n\n    return contacts.filter(el => el.name.toLowerCase().indexOf(searchQuery) > -1);\n  };\n\n  const handleQuery = data => {\n    if (data.trim() === '') {\n      setFilter('');\n      setSearchResult([]);\n      return;\n    }\n    setFilter(data);\n    const res = searchContacts(data);\n    setSearchResult(res);\n  };\n\n  const checkForDouble = newName => {\n    const isDouble = contacts.find(contact => contact.name === newName);\n    if (isDouble) alert(`${newName} is already in contacts`);\n    return isDouble;\n  };\n\n  const onDeleteBtn = dataId => {\n    const updatedList = contacts.filter(el => el.id !== dataId);\n    setContacts(updatedList);\n  };\n\n  return (\n    <Wrapper>\n      <h1>Phonebook</h1>\n      <Form onSubmit={handleFormSubmit} />\n\n      <h2>Contacts</h2>\n      <Filter onChange={handleQuery} />\n      <Contacts searchResult={searchResult} contactsList={contacts} btnDelete={onDeleteBtn} />\n    </Wrapper>\n  );\n};\n\nclass classedApp extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n    searchResult: [],\n  };\n\n  handleFormSubmit = ({ name, number }) => {\n    const isDouble = this.checkForDouble(name);\n    if (isDouble) return;\n    this.setState(prevState => {\n      return {\n        contacts: [...prevState.contacts, { name, number, id: uuidv4() }],\n      };\n    });\n  };\n\n  searchContacts = query => {\n    const searchQuery = query.trim().toLowerCase();\n    const list = this.state.contacts;\n    const result = list.filter(el => el.name.toLowerCase().indexOf(searchQuery) > -1);\n\n    return result;\n  };\n\n  handleQuery = data => {\n    if (data.trim() === '') {\n      this.updateStateEl('filter', '');\n      this.updateStateEl('searchResult', []);\n      return;\n    }\n    this.setState({ filter: data });\n    const res = this.searchContacts(data);\n    this.setState({ searchResult: res });\n  };\n\n  updateStateEl = (type, value) => {\n    this.setState({ [type]: value });\n  };\n\n  checkForDouble = newName => {\n    const isDouble = this.state.contacts.find(contact => contact.name === newName);\n    if (isDouble) alert(`${newName} is already in contacts`);\n    return isDouble;\n  };\n\n  onDeleteBtn = dataId => {\n    const contacts = this.state.contacts;\n    const updatedList = contacts.filter(el => el.id !== dataId);\n    this.updateStateEl('contacts', updatedList);\n  };\n\n  render() {\n    const { contacts, searchResult } = this.state;\n\n    return (\n      <Wrapper>\n        <h1>Phonebook</h1>\n        <Form onSubmit={this.handleFormSubmit} />\n\n        <h2>Contacts</h2>\n        <Filter onChange={this.handleQuery} />\n        <Contacts\n          searchResult={searchResult}\n          contactsList={contacts}\n          btnDelete={this.onDeleteBtn}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}